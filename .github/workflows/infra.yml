name: Deploy Infrastructure

on:
  push:
    branches:
      - 5.1-EC2-Docker
jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
       - name: Checkout Code
         uses: actions/checkout@v2

       - name: Set up AWS CLI
         uses: aws-actions/configure-aws-credentials@v2
         with:
             role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
             role-duration-seconds: 3600
             aws-region: us-east-1
     
       - name: Check if VpcStack Exists
         id: check-vpc-stack
         run: |
          vpc_stack_status=$(aws cloudformation describe-stacks \
            --stack-name VpcStack \
            --query "Stacks[0].StackStatus" \
            --output text || echo "NOT_FOUND")
          echo "::set-output name=vpc_stack_status::$vpc_stack_status"
       - name: Deploy VPC Stack
         if: steps.check-vpc-stack.outputs.vpc_stack_status == 'NOT_FOUND'
         run: |
          aws cloudformation create-stack \
            --stack-name VpcStack \
            --template-body file://vpc.yaml \
            --parameters ParameterKey=VpcStackName,ParameterValue=vpc \
            --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation wait stack-create-complete --stack-name VpcStack
          
       - name: Check if ec2Stack Exists
         id: check-ec2-stack
         run: |
          ec2_stack_status=$(aws cloudformation describe-stacks \
            --stack-name ec2Stack \
            --query "Stacks[0].StackStatus" \
            --output text || echo "NOT_FOUND")
          echo "::set-output name=ec2_stack_status::$ec2_stack_status"
       - name: Deploy ec2 Stack
         if: steps.check-ec2-stack.outputs.ec2_stack_status == 'NOT_FOUND'
         run: |
          vpc_outputs=$(aws cloudformation describe-stacks --stack-name VpcStack --query "Stacks[0].Outputs" --output json)
          vpc_id=$(echo "$vpc_outputs" | jq -r '.[] | select(.OutputKey == "VpcId") | .OutputValue')
          security_group=$(echo "$vpc_outputs" | jq -r '.[] | select(.OutputKey == "WebServerSecurityGroup") | .OutputValue')
          public_subnet1=$(echo "$vpc_outputs" | jq -r '.[] | select(.OutputKey == "PublicSubnet1") | .OutputValue')
    
           aws cloudformation create-stack \
            --stack-name ec2Stack \
            --template-body file://ec2.yaml \
            --parameters ParameterKey=VpcId,ParameterValue="$vpc_id" \
                         ParameterKey=WebServerSecurityGroup,ParameterValue="$security_group" \
                         ParameterKey=PublicSubnet1,ParameterValue="$public_subnet1" \
            --capabilities CAPABILITY_NAMED_IAM
           aws cloudformation wait stack-create-complete --stack-name ec2Stack

       - name: Get EC2 Public IP	
         id: get-ec2-public-ip	
         run: |	
          if [ "$stack_status" = "CREATE_COMPLETE" ]; then	
            ec2_public_ip=$(aws cloudformation describe-stacks \	
              --stack-name ec2Stack \	
              --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIp'].OutputValue" \	
              --output text)	
            echo "EC2_PUBLIC_IP=$ec2_public_ip" >> $GITHUB_ENV
            echo "::set-output name=ec2_public_ip::$ec2_public_ip"
          fi
    outputs:
      ec2_public_ip: ${{ steps.get-ec2-public-ip.outputs.ec2_public_ip }}

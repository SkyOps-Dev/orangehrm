name: Deploy Infrastructure

on:
  push:
    branches:
      - 5.1-ec2-docker-infra

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
       - name: Checkout Code
         uses: actions/checkout@v2

       - name: Set up AWS CLI
         uses: aws-actions/configure-aws-credentials@v2
         with:
             role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
             role-duration-seconds: 3600
             aws-region: us-east-1

       - name: Create S3 Bucket
         run: |
           aws s3api create-bucket --bucket cfn-template09 --acl private --region us-east-1

       - name: Upload Files to S3 Bucket
         run: |
           aws s3 cp ./infra/ s3://cfn-template09/ --recursive --acl private

       - name: Check List of file into S3 Bucket
         run: |
           aws s3 ls s3://cfn-template09/ 

       - name: Fetch Main Stack Template
         run: |
           aws s3 cp s3://cfn-template09/main-vpc-ec2.yaml ./main-vpc-ec2.yaml
     
       - name: Check if Main Stack Exists
         id: main-stack
         run: |
          stack_status=$(aws cloudformation describe-stacks \
            --stack-name MainStack \
            --query "Stacks[0].StackStatus" \
            --output text || echo "NOT_FOUND")
          echo "::set-output name=stack_status::$stack_status"

       - name: Deploy Main Stack
         if: steps.main-stack.outputs.stack_status == 'NOT_FOUND'
         run: |
          aws cloudformation create-stack \
            --stack-name MainStack \
            --template-body file://main-vpc-ec2.yaml \
            --parameters ParameterKey=VpcStackName,ParameterValue=vpc \
            --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation wait stack-create-complete --stack-name MainStack
          
       - name: Get EC2 Instance Info
         run: |
           instance_id=$(aws cloudformation describe-stack-resource --stack-name MainStack --logical-resource-id 991108593442 --query "StackResourceDetail.PhysicalResourceId" --output text)
           ec2_info=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[0].Instances[0]")
           public_ip=$(echo $ec2_info | jq -r '.PublicIpAddress')
           public_dns=$(echo $ec2_info | jq -r '.PublicDnsName')
           echo "Public IP: $public_ip"
           echo "Public DNS: $public_dns"

       - name: Store EC2 Public IP in Parameter Store 
         if: steps.get-ec2-public-ip.outputs.ec2_public_ip != ''
         run: |
          aws ssm put-parameter \
            --name EC2PublicIP \
            --value ${{ steps.get-ec2-public-ip.outputs.ec2_public_ip }} \
            --type String \
            --overwrite

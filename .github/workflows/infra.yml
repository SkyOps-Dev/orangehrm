name: Deploy Infrastructure

on:
  push:
    branches:
      - 5.1-ec2-docker-infra
env:
  RoleName: orangehrms3policy
  KEY_PAIR_NAME: skyops-ms
  PARAMETER_NAME: private-key
  PRIVATE_KEY_FILE: skyops-ms.pem

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
       - name: Checkout Code
         uses: actions/checkout@v2

       - name: Set up AWS CLI
         uses: aws-actions/configure-aws-credentials@v2
         with:
             role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
             role-duration-seconds: 3600
             aws-region: us-east-1
                      
       - name: Check if key pair exists
         run: |
          if aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --query "KeyPairs[0].KeyName" --output text; then
            echo "Key pair '$KEY_PAIR_NAME' already exists"
            KEY_ALREADY_EXISTS="true"
          else
            # Key pair does not exist, create it
            PRIVATE_KEY_FILE="skyops-ms.pem"
            aws ec2 create-key-pair --key-name "$KEY_PAIR_NAME" --query 'KeyMaterial' --output text > "$PRIVATE_KEY_FILE"
            chmod 400 "$PRIVATE_KEY_FILE"
            KEY_ALREADY_EXISTS="false"
            echo "Created key pair '$KEY_PAIR_NAME' successfully"
          fi
          
       - name: Check if key exists in Parameter Store
         run: |  
           if aws ssm get-parameter --name "$PARAMETER_NAME" --query "Parameter.Name" --output text; then
           echo "Key '$PARAMETER_NAME' already exists in Parameter Store"
           else
           
           if [ -f "$PRIVATE_KEY_FILE" ]; then
           aws ssm put-parameter --name "$PARAMETER_NAME" --value file://"$PRIVATE_KEY_FILE" --type String --overwrite
           echo "Stored key in Parameter Store"
           else
           echo "Private key file '$PRIVATE_KEY_FILE' not found"
           exit 1
           fi
           fi

       - name: Create S3 Bucket
         run: |
           aws s3api create-bucket --bucket cfn-template09 --acl private --region us-east-1

       - name: Upload Files to S3 Bucket
         run: |
           aws s3 cp ./infra/ s3://cfn-template09/ --recursive --acl private

       - name: Check List of file into S3 Bucket
         run: |
           aws s3 ls s3://cfn-template09/

       - name: Fetch Main Stack Template
         run: |
           aws s3 cp s3://cfn-template09/main-vpc-ec2.yaml ./main-vpc-ec2.yaml
     
       - name: Check if Main Stack Exists
         id: main-stack
         run: |
          stack_status=$(aws cloudformation describe-stacks \
            --stack-name MainStack \
            --query "Stacks[0].StackStatus" \
            --output text || echo "NOT_FOUND")
          echo "::set-output name=stack_status::$stack_status"

       - name: Deploy Main Stack
         if: steps.main-stack.outputs.stack_status == 'NOT_FOUND' 
         run: |
          ROLE_NAME=${{ env.RoleName }}
          aws cloudformation create-stack \
            --stack-name MainStack \
            --template-body file://main-vpc-ec2.yaml \
            --parameters "ParameterKey=VpcStackName,ParameterValue=vpc" \
                         "ParameterKey=RoleName,ParameterValue=$ROLE_NAME" \
            --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation wait stack-create-complete --stack-name MainStack

       - name: List CloudFormation Stacks 
         run: |
           ec2_stacks=$(aws cloudformation list-stacks --query "StackSummaries[?StackStatus!='DELETE_COMPLETE' && contains(StackName, 'ec2')].StackName" --output json)
           ec2_stacks=$(echo "$ec2_stacks" | jq -r '.[]')
           echo "::set-output name=ec2_stacks::$ec2_stacks"
           
           instance_id=$(aws cloudformation describe-stack-resource --stack-name "$ec2_stacks" --logical-resource-id MyEC2Instance --query "StackResourceDetail.PhysicalResourceId" --output text)
           ec2_info=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[0].Instances[0]")
           public_ip=$(echo $ec2_info | jq -r '.PublicIpAddress')
           public_dns=$(echo $ec2_info | jq -r '.PublicDnsName')
           echo "Public IP: $public_ip"
           echo "Public DNS: $public_dns"
           
           aws ssm put-parameter --name "MyPublicIPAddress" --value "$public_ip" --type String --overwrite

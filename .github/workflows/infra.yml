name: Deploy Infrastructure

on:
  push:
    branches:
      - 5.1-ec2-docker-infra

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
       - name: Checkout Code
         uses: actions/checkout@v2

       - name: Set up AWS CLI
         uses: aws-actions/configure-aws-credentials@v2
         with:
             role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
             role-duration-seconds: 3600
             aws-region: us-east-1
     
       - name: Check if VpcStack Exists
         id: check-vpc-stack
         run: |
            vpc_stack_status=$(aws cloudformation describe-stacks \
              --stack-name vpc \
              --query "Stacks[0].StackStatus" \
              --output text || echo "NOT_FOUND")
            echo "::set-output name=vpc_stack_status::$vpc_stack_status

       - name: Deploy vpc Stack
         run: |
          stack_status="${{ steps.check-stack.outputs.stack_status }}"
          if [ "$stack_status" = "NOT_FOUND" ]; then
            aws cloudformation create-stack \
              --stack-name vpc \
              --template-body file://vpc.yaml \
              --parameters ParameterKey=VpcStackName,ParameterValue=vpc \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name vpc
          else
            echo "VpcStack already exists, skipping deployment."
          fi

       - name: Check if ec2Stack Exists
         id: check-ec2-stack
         run: |
          ec2_stack_status=$(aws cloudformation describe-stacks \
          --stack-name ec2Stack \
          --query "Stacks[0].StackStatus" \
          --output text || echo "NOT_FOUND")
          echo "::set-output name=ec2_stack_status::$ec2_stack_status"

       - name: Deploy ec2 Stack
         run: |
          stack_status="${{ steps.check-stack.outputs.stack_status }}"
          if [ "$stack_status" = "NOT_FOUND" ]; then
            aws cloudformation create-stack \
              --stack-name ec2Stack \
              --template-body file://ec2.yaml \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name ec2Stack
          else
            echo "ec2Stack already exists, skipping deployment."
          fi

       - name: Get EC2 Public IP	
         id: get-ec2-public-ip	
         run: |	
          if [ "$stack_status" = "CREATE_COMPLETE" ]; then	
            ec2_public_ip=$(aws cloudformation describe-stacks \	
              --stack-name ec2Stack \	
              --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIp'].OutputValue" \	
              --output text)	
            echo "EC2_PUBLIC_IP=$ec2_public_ip" >> $GITHUB_ENV
          fi

    outputs:
      ec2_public_ip: ${{ steps.get-ec2-public-ip.outputs.ec2_public_ip }}
